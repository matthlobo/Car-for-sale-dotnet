// <auto-generated />
using System;
using CarForSale;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CarForSale.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20210410193026_nomeCompleto")]
    partial class nomeCompleto
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CarForSale.DataAccess.Entities.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Cpf");

                    b.Property<string>("Email");

                    b.Property<string>("NomeCompleto");

                    b.Property<string>("Senha");

                    b.HasKey("Id");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("CarForSale.DataAccess.Entities.Fornecedor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Codigo");

                    b.Property<string>("Nome");

                    b.HasKey("Id");

                    b.ToTable("Fornecedores");
                });

            modelBuilder.Entity("CarForSale.DataAccess.Entities.Pedido", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ClienteId");

                    b.Property<Guid?>("VeiculoId");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("VeiculoId");

                    b.ToTable("Pedidos");
                });

            modelBuilder.Entity("CarForSale.DataAccess.Entities.Veiculo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Cor");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<Guid?>("FornecedorId");

                    b.Property<string>("Modelo");

                    b.Property<string>("Motor");

                    b.Property<string>("Tipo");

                    b.HasKey("Id");

                    b.HasIndex("FornecedorId");

                    b.ToTable("Veiculo");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Veiculo");
                });

            modelBuilder.Entity("CarForSale.DataAccess.Entities.Carro", b =>
                {
                    b.HasBaseType("CarForSale.DataAccess.Entities.Veiculo");

                    b.Property<string>("LitrosPortaMalas");

                    b.ToTable("Carro");

                    b.HasDiscriminator().HasValue("Carro");
                });

            modelBuilder.Entity("CarForSale.DataAccess.Entities.Moto", b =>
                {
                    b.HasBaseType("CarForSale.DataAccess.Entities.Veiculo");

                    b.Property<string>("Cilindradas");

                    b.ToTable("Moto");

                    b.HasDiscriminator().HasValue("Moto");
                });

            modelBuilder.Entity("CarForSale.DataAccess.Entities.Pedido", b =>
                {
                    b.HasOne("CarForSale.DataAccess.Entities.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId");

                    b.HasOne("CarForSale.DataAccess.Entities.Veiculo", "Veiculo")
                        .WithMany()
                        .HasForeignKey("VeiculoId");
                });

            modelBuilder.Entity("CarForSale.DataAccess.Entities.Veiculo", b =>
                {
                    b.HasOne("CarForSale.DataAccess.Entities.Fornecedor")
                        .WithMany("Veiculos")
                        .HasForeignKey("FornecedorId");
                });
#pragma warning restore 612, 618
        }
    }
}
